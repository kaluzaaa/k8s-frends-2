# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

stages:
  - stage: Build
    displayName: 'Build demo-app'
    jobs:
      - job: Build
        pool:
          vmImage: ubuntu-latest
        steps:
        - task: Docker@2
          inputs:
            containerRegistry: 'acr'
            repository: 'demo-app'
            command: 'buildAndPush'
            Dockerfile: 'src/Dockerfile'
            buildContext: 'src/.'
        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: 'k8s'
            artifact: 'manifest'
            publishLocation: 'pipeline'
  - stage: DeployDEV
    displayName: "Deploy to DEV"
    dependsOn: Build
    variables:
      ingress: "dev-demo-app.frends2.kaluzny.io"
      env: dev
    jobs:
      - deployment: DeployDEV
        environment: dev
        pool:
          vmImage: ubuntu-latest
        strategy:
          runOnce:
            deploy:
              steps:
                - task: DownloadPipelineArtifact@2
                  inputs:
                    buildType: 'current'
                    artifactName: 'manifest'
                    targetPath: '$(Pipeline.Workspace)'

                - task: CmdLine@2
                  inputs:
                   script: 'kubectl create cm demo-app-config  --from-file=$(Pipeline.Workspace)/$(env)/appsettings.json -o yaml --dry-run=client > $(Pipeline.Workspace)/cm.yaml'

                - task: replacetokens@5
                  inputs:
                    targetFiles: '$(Pipeline.Workspace)/*.yaml'
                    encoding: 'auto'
                    tokenPattern: 'default'
                    writeBOM: true
                    actionOnMissing: 'warn'
                    keepToken: false
                    actionOnNoFiles: 'continue'
                    enableTransforms: false
                    enableRecursion: false
                    useLegacyPattern: false
                    enableTelemetry: true
                - task: KubernetesManifest@1
                  inputs:
                    action: 'deploy'
                    connectionType: 'kubernetesServiceConnection'
                    kubernetesServiceConnection: 'dev-frends-dev-demo-app-1689928780435'
                    namespace: '$(env)-demo-app'
                    manifests: '$(Pipeline.Workspace)/*.yaml'
                    containers: 'frends2demo.azurecr.io/demo-app:$(Build.BuildId)'

  - stage: DeployPROD
    displayName: "Deploy to PROD"
    dependsOn: DeployPROD
    variables:
      ingress: "prod-demo-app.frends2.kaluzny.io"
      env: prod
    jobs:
      - deployment: DeployPROD
        environment: prod
        pool:
          vmImage: ubuntu-latest
        strategy:
          runOnce:
            deploy:
              steps:
                - task: DownloadPipelineArtifact@2
                  inputs:
                    buildType: 'current'
                    artifactName: 'manifest'
                    targetPath: '$(Pipeline.Workspace)'

                - task: CmdLine@2
                  inputs:
                   script: 'kubectl create cm demo-app-config  --from-file=$(Pipeline.Workspace)/$(env)/appsettings.json -o yaml --dry-run=client > $(Pipeline.Workspace)/cm.yaml'

                - task: replacetokens@5
                  inputs:
                    targetFiles: '$(Pipeline.Workspace)/*.yaml'
                    encoding: 'auto'
                    tokenPattern: 'default'
                    writeBOM: true
                    actionOnMissing: 'warn'
                    keepToken: false
                    actionOnNoFiles: 'continue'
                    enableTransforms: false
                    enableRecursion: false
                    useLegacyPattern: false
                    enableTelemetry: true
                - task: KubernetesManifest@1
                  inputs:
                    action: 'deploy'
                    connectionType: 'kubernetesServiceConnection'
                    kubernetesServiceConnection: 'prod-frends-prod-demo-app-1689928823212'
                    namespace: '$(env)-demo-app'
                    manifests: '$(Pipeline.Workspace)/*.yaml'
                    containers: 'frends2demo.azurecr.io/demo-app:$(Build.BuildId)'